# Project 1.3: IP & Connectivity Test Report

**Phase:** I (Beginner)  
**Project No.:** P1.3  
**Objective:** Verify IP configurations and troubleshoot connectivity issues.  
**Time Estimate:** 2-3 hours.  
**Real-World Tie-In:** Emulates network technician tasks in diagnosing connectivity problems.  
**Concepts Covered:** IPv4/IPv6, Troubleshooting Commands (ping, tracert, ipconfig), DNS Resolution.  
**Tools/Requirements:** 
- VMs from P1.2.
- Command line.

## Kanban Tasks
- [ ] Configure IPs
- [ ] Run connectivity tests
- [ ] Simulate failures
- [ ] Write report

## Detailed Steps

### 1. Configure IPs (30 minutes)
1. VM1: Set IPv4 `10.0.0.1/8`, IPv6 `fe80::1`.
2. VM2: Set IPv4 `10.0.0.2/8`, IPv6 `fe80::2`.
3. Verify: `ip addr` (Ubuntu), `ipconfig` (Windows).

### 2. Run Connectivity Tests (45 minutes)
1. Ping: `ping 10.0.0.2`, `ping -6 fe80::2%eth0`.
2. Traceroute: `tracert 10.0.0.2` (Windows), `traceroute 10.0.0.2` (Ubuntu).
3. DNS: Set `/etc/hosts` with `10.0.0.2 test.local`, test `ping test.local`.

### 3. Simulate Failures (30 minutes)
1. Misconfigure IP (e.g., `10.0.1.2`) and ping.
2. Clear ARP: `arp -d *` (Windows), `sudo ip -s -s neigh flush all` (Ubuntu).
3. Log errors: `ping ... > error.log`.

### 4. Write Report (30 minutes)
1. Create `/phase-1/p1.3-ip-connectivity/report.md`.
2. Include command outputs, error fixes, and DNS setup.
3. Table: `| Command | Result | Fix |`.

**Deliverables:** 
- Report (`report.md`).
- Command logs (`/assets/ping-error.log`).
- Screenshot (`/assets/ip-config.png`).

**Tips & Troubleshooting:** 
- IPv6 ping fails: Enable IPv6 in OS settings.
- DNS issues: Flush cache (`ipconfig /flushdns`).
- Commit: `git add . && git commit -m "P1.3 connectivity report completed" && git push`.